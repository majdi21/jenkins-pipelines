node {
    unstash 'mock-api.json'
    def imageExists = true
    /*if ( mock-api.json != null && !mock-api.json.equals("") ) {
        echo "Parameter set"
    }
    else {
        echo "Parameter not set"
    }*/
    stage('Stop APIs') { // for display purposes
        // Get some code from a GitHub repository
        //git 'https://github.com/jglick/simple-maven-project-with-tests.git'
        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        //mvnHome = tool 'M3'
        def result = sh label: 'Looking for docker image ' + API_NAME, returnStdout: true, script: 'docker images ' + API_NAME + ' --format json'
        try {
            def image = readJSON text: result, returnPojo: true
            sh label: 'Stopping docker container'+ API_NAME, script: 'docker stop ' + API_NAME
            //image.each { key, value ->
            //    echo "Walked through key $key and value $value"
            //}
        }
        catch (e) {
            imageExists = false;
            echo "No such APIs"
        }
        
    }
    stage('Remove Docker container') {
        if ( imageExists ) {
            sh label: 'Remove APIs ' + API_NAME, script: 'docker rm -f ' + API_NAME
        }
        // Run the maven build
        //withEnv(["MVN_HOME=$mvnHome"]) {
        //    if (isUnix()) {
        //        sh '"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'
        //    } else {
        //        bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/)
        //    }
        //}
    }
    stage('Remove APIs') {
        if ( imageExists ) {
            sh label: 'Remove APIs ' + API_NAME, script: 'docker rmi -f ' + API_NAME
        }
        // Run the maven build
        //withEnv(["MVN_HOME=$mvnHome"]) {
        //    if (isUnix()) {
        //        sh '"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'
        //    } else {
        //        bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/)
        //    }
        //}
    }
    stage('Dockerize APIs') {
        sh label: 'Create Dockerfile for ' + API_NAME, script: 'mockoon-cli dockerize --data mock-api.json --port ${port} --output ./Dockerfile'
        //junit '**/target/surefire-reports/TEST-*.xml'
        //archiveArtifacts 'target/*.jar'
    }
    stage('Create Docker Image') {
        sh label: 'Create Image ' + API_NAME, script: 'docker build --no-cache -t ' + API_NAME + ' .'
    }
    stage('Start APIs') {
        //docker run -d -p 3000:3000  mockoon-image
        sh label: 'start APIs ' + API_NAME, script: 'docker run -d -p ${port}:${port} --name=' + API_NAME + ' ' + API_NAME
    }
}

